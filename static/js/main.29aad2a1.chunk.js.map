{"version":3,"sources":["components/DropdownList/Dropdown/Dropdown.jsx","components/DropdownList/DropdownItem/DropdownItem.jsx","components/DropdownList/DropdownList.jsx","components/DropdownList/SelectedValue/SelectedValue.jsx","App.js","reportWebVitals.js","index.js"],"names":["Dropdown","props","className","onClick","e","showList","target","blur","onToggle","DropdownItem","items","map","item","classnames","selected","value","id","onSelect","DropdownList","useState","setShowList","setSelected","data","textContent","onGetSelected","SelectedValue","App","dataWithId","nanoid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAoBeA,MAhBf,SAAkBC,GAKhB,OACE,wBAAQC,UAAU,gBAAgBC,QALnB,SAAAC,GACfH,EAAMI,UAAYD,EAAEE,OAAOC,OAC3BN,EAAMO,SAASP,EAAMI,WAGrB,+B,8BCqBWI,MA1Bf,SAAsBR,GACpB,IAAMS,EAAQT,EAAMS,MAAMC,KAAI,SAAAC,GAAI,OAChC,oBAEEV,UAAWW,IAAW,eAAgB,CAAEC,SAAUb,EAAMa,WAAaF,EAAKG,QAF5E,SAIGH,EAAKG,OAHDH,EAAKI,OAWd,OACE,oBAAId,UAAU,qBAAqBC,QALpB,SAAAC,GACfH,EAAMgB,SAASb,IAIf,SACGM,KCgBQQ,MA/Bf,SAAsBjB,GAAQ,IAAD,EACKkB,oBAAS,GADd,mBACpBd,EADoB,KACVe,EADU,OAEKD,mBAAS,IAFd,mBAEpBL,EAFoB,KAEVO,EAFU,KAc3B,OACE,gCACE,cAAC,EAAD,CAAUb,SAZO,WACnBY,GAAaf,IAWuBA,SAAUA,IAC3CA,GACC,qBAAKH,UAAU,oCAAf,SACE,cAAC,EAAD,CAAcQ,MAAOT,EAAMqB,KAAML,SAXpB,SAAAb,GACnBiB,EAAYjB,EAAEE,OAAOiB,aACrBH,GAAaf,GACbJ,EAAMuB,cAAcpB,EAAEE,OAAOiB,cAQkCT,SAAUA,U,MCT9DW,MAZf,SAAuBxB,GACrB,OACE,sBAAKC,UAAU,gBAAf,uEACe,sBAAMA,UAAU,WAAhB,SAA4BD,EAAMa,eCyBtCY,MAxBf,WACE,IADa,EAGmBP,mBAAS,IAH5B,mBAGNL,EAHM,KAGIO,EAHJ,KAKPM,EAJO,CAAC,sBAAuB,kBAAmB,aAAc,OAAQ,WAItDhB,KAAI,SAAAP,GAC1B,MAAO,CACLW,MAAOX,EACPY,GAAIY,kBAQR,OACE,sBAAK1B,UAAU,MAAf,UACGY,GAAY,cAAC,EAAD,CAAeA,SAAUA,IACtC,cAAC,EAAD,CAAcQ,KAAMK,EAAYH,cAPd,SAAAT,GACpBM,EAAYN,UCTDc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.29aad2a1.chunk.js","sourcesContent":["import React from 'react'\nimport './Dropdown.css'\nimport PropTypes from 'prop-types'\n\nfunction Dropdown(props) {\n  const onToggle = e => {\n    props.showList && e.target.blur()\n    props.onToggle(props.showList)\n  }\n  return (\n    <button className=\"dropdown__btn\" onClick={onToggle}>\n      account settings\n    </button>\n  )\n}\n\nDropdown.propTypes = {\n  onToggle: PropTypes.func.isRequired,\n}\n\nexport default Dropdown\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport './DropdownItem.css'\n\nfunction DropdownItem(props) {\n  const items = props.items.map(item => (\n    <li\n      key={item.id}\n      className={classnames('dropdownItem', { selected: props.selected === item.value })}\n    >\n      {item.value}\n    </li>\n  ))\n\n  const onSelect = e => {\n    props.onSelect(e)\n  }\n\n  return (\n    <ul className=\"dropdownList__list\" onClick={onSelect}>\n      {items}\n    </ul>\n  )\n}\n\nDropdownItem.propTypes = {\n  items: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n}\n\nexport default DropdownItem\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Dropdown from './Dropdown/Dropdown'\nimport './DropdownList.css'\nimport DropdownItem from './DropdownItem/DropdownItem'\n\nfunction DropdownList(props) {\n  const [showList, setShowList] = useState(false)\n  const [selected, setSelected] = useState('')\n\n  const onToggleList = () => {\n    setShowList(!showList)\n  }\n\n  const onSelectItem = e => {\n    setSelected(e.target.textContent)\n    setShowList(!showList)\n    props.onGetSelected(e.target.textContent)\n  }\n\n  return (\n    <div>\n      <Dropdown onToggle={onToggleList} showList={showList} />\n      {showList && (\n        <div className=\"dropdownList__container arrow_box\">\n          <DropdownItem items={props.data} onSelect={onSelectItem} selected={selected} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nDropdownList.propTypes = {\n  data: PropTypes.array.isRequired,\n  onGetSelected: PropTypes.func,\n}\n\nexport default DropdownList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './SelectedValue.css'\n\nfunction SelectedValue(props) {\n  return (\n    <div className=\"selectedValue\">\n      Вы выбрали : <span className=\"selected\">{props.selected}</span>\n    </div>\n  )\n}\n\nSelectedValue.propTypes = {\n  selected: PropTypes.string,\n}\n\nexport default SelectedValue\n","import './App.css'\nimport React, { useState } from 'react'\n\nimport { nanoid } from 'nanoid'\n\nimport DropdownList from './components/DropdownList/DropdownList'\nimport SelectedValue from './components/DropdownList/SelectedValue/SelectedValue'\n\nfunction App() {\n  const data = ['profile information', 'change password', 'become PRO', 'help', 'log out']\n\n  const [selected, setSelected] = useState('')\n\n  const dataWithId = data.map(e => {\n    return {\n      value: e,\n      id: nanoid(),\n    }\n  })\n\n  const onGetSelected = value => {\n    setSelected(value)\n  }\n\n  return (\n    <div className=\"App\">\n      {selected && <SelectedValue selected={selected} />}\n      <DropdownList data={dataWithId} onGetSelected={onGetSelected} />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}